{"ast":null,"code":"import { Router } from '@angular/router';\n//traerse el injector (similar al constructor), se usa cuando no tenemos una clase\nimport { inject } from '@angular/core';\nexport const verifyTokenGuard = (route, state) => {\n  //esto retorna dos cosas, un booleano o un observable que retorna un booleano.\n  const token = sessionStorage.getItem('token-products');\n  const router = inject(Router);\n  if (!token) {\n    router.navigate(['login']);\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["Router","inject","verifyTokenGuard","route","state","token","sessionStorage","getItem","router","navigate"],"sources":["C:\\Users\\luisc\\BOOTCAMP\\ANGULAR\\ANGULAR-SESSION7\\session_7-main\\src\\app\\auth\\verify-token.guard.ts"],"sourcesContent":["import { CanActivateFn, Router } from '@angular/router';\n//traerse el injector (similar al constructor), se usa cuando no tenemos una clase\nimport { inject } from '@angular/core';\n\nexport const verifyTokenGuard: CanActivateFn = (route, state) => {\n  //esto retorna dos cosas, un booleano o un observable que retorna un booleano.\n  const token = sessionStorage.getItem('token-products');\n  const router = inject(Router)\n  \n\n  if (!token){\n    router.navigate(['login'])\n    return false\n  }\n\n  return true;\n};\n"],"mappings":"AAAA,SAAwBA,MAAM,QAAQ,iBAAiB;AACvD;AACA,SAASC,MAAM,QAAQ,eAAe;AAEtC,OAAO,MAAMC,gBAAgB,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EAC9D;EACA,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,gBAAgB,CAAC;EACtD,MAAMC,MAAM,GAAGP,MAAM,CAACD,MAAM,CAAC;EAG7B,IAAI,CAACK,KAAK,EAAC;IACTG,MAAM,CAACC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAC1B,OAAO,KAAK;;EAGd,OAAO,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}